name: Deploy to Azure VM

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no FoodConnect@4.201.144.173 '
            set -e
            PROJECT_DIR="/home/FoodConnect/foodconnect-backend"
            SERVICE_NAME="register-users-employees"
            TEST_IMAGE="${SERVICE_NAME}_test"
            LOG_DIR="$HOME/logs"
            CREDENTIALS_PATH="/home/FoodConnect/credentials"

            cd $PROJECT_DIR/$SERVICE_NAME

            echo "Atualizando código fonte..."
            git pull origin main

            echo "Atualizando jar da VM..."
            ./mvnw clean package -DskipTests

            echo "Construindo imagem de teste..."
            docker build -t $TEST_IMAGE .

            echo "Verificando container de teste rodando em 8089..."
            TEST_CONTAINER_ID=$(docker ps -q -f publish=8089)
            if [ ! -z "$TEST_CONTAINER_ID" ]; then
              docker stop $TEST_CONTAINER_ID
              docker rm -f $TEST_CONTAINER_ID
            fi

            echo "Subindo container de teste com a nova imagem..."
            docker run -d --name ${SERVICE_NAME}_test -p 8089:8080 \
              -v $CREDENTIALS_PATH:/credentials:ro \
              $TEST_IMAGE

            echo "Aguardando container iniciar..."
            sleep 10

            echo "Verificando se container de teste subiu corretamente..."
            docker logs ${SERVICE_NAME}_test | grep -q "Started" || {
              echo "Erro detectado! Salvando logs..."
              mkdir -p $LOG_DIR
              docker logs ${SERVICE_NAME}_test > $LOG_DIR/${SERVICE_NAME}_test-$(date +%Y%m%d-%H%M%S).log
              docker rm -f ${SERVICE_NAME}_test
              echo "Abortando deploy."
              exit 1
            }

            echo "Parando e removendo container antigo do docker-compose..."
            cd $PROJECT_DIR
            docker compose stop $SERVICE_NAME || true
            docker compose rm -f $SERVICE_NAME || true

            echo "Atualizando imagem no docker-compose e subindo..."
            docker tag $TEST_IMAGE $SERVICE_NAME
            docker image prune -f
            docker rmi $TEST_IMAGE || true

            docker compose up -d --no-deps --force-recreate $SERVICE_NAME

            echo "Removendo container de teste..."
            docker rm -f ${SERVICE_NAME}_test || true

            echo "Limpando recursos não utilizados..."
            docker image prune -af --filter "until=24h" || true
            docker container prune -f || true
            docker volume prune -f || true
            docker network prune -f || true

            echo "Deploy finalizado com sucesso!"
          '
